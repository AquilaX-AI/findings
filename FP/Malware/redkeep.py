import socket
import os
import random
import struct
import string
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from Crypto import Random
import requests

AWS_ACCESS_KEY_ID = "REDACTED"
AWS_SECRET_ACCESS_KEY = "REDACTED"

def getKey(password):
    hasher = SHA256.new(password.encode('utf-8'))
    return hasher.digest()

def encrypt(key, filename):
    chunksize = 64 * 1024
    outputFile = "(encrypted)" + filename
    filesize = str(os.path.getsize(filename)).zfill(16)
    IV = Random.new().read(16)
    encryptor = AES.new(key, AES.MODE_CBC, IV)
    
    with open(filename, 'rb') as infile:
        with open(outputFile, 'wb') as outfile:
            outfile.write(filesize.encode('utf-8'))
            outfile.write(IV)
            while True:
                chunk = infile.read(chunksize)
                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += b' ' * (16 - len(chunk) % 16)
                outfile.write(encryptor.encrypt(chunk))

def get_random_ip():
    return "{}.{}.{}.{}".format(random.randint(1, 255), random.randint(0, 255), random.randint(0, 255), random.randint(1, 255))

def check_domain(domain):
    try:
        socket.gethostbyname(domain)
        return True
    except socket.gaierror:
        return False

if __name__ == "__main__":
    test_domain = "example.com"
    if check_domain(test_domain):
        print(f"Domain {test_domain} is reachable.")
    else:
        print(f"Domain {test_domain} is not reachable.")
    
    sample_key = getKey("testpassword")
    print("Encryption key generated successfully.")
