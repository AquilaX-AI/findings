use strict;
use warnings;
use IO::Socket;
use Time::HiRes qw(usleep);
use threads;
use Thread::Queue;

my $MAX_THREADS = 10;

my $TIMEOUT = 2;

my $queue = Thread::Queue->new();

if (@ARGV < 3) {
    print "Usage: $0 <target IP> <start port> <end port>\n";
    exit(1);
}

my ($target_ip, $start_port, $end_port) = @ARGV;

if ($target_ip !~ /^(\d{1,3}\.){3}\d{1,3}$/) {
    die "Invalid IP format: $target_ip\n";
}

if ($start_port !~ /^\d+$/ || $end_port !~ /^\d+$/ || $start_port > $end_port || $start_port < 1 || $end_port > 65535) {
    die "Invalid port range: $start_port - $end_port\n";
}

for my $port ($start_port .. $end_port) {
    $queue->enqueue($port);
}

sub tcp_scan {
    while (defined(my $port = $queue->dequeue())) {
        my $socket = IO::Socket::INET->new(
            PeerAddr => $target_ip,
            PeerPort => $port,
            Proto    => 'tcp',
            Timeout  => $TIMEOUT
        );

        if ($socket) {
            print "[+] TCP port $port is open\n";
            close($socket);
        }
    }
}

sub udp_scan {
    while (defined(my $port = $queue->dequeue())) {
        my $socket = IO::Socket::INET->new(
            PeerAddr => $target_ip,
            PeerPort => $port,
            Proto    => 'udp',
            Timeout  => $TIMEOUT
        );

        if ($socket) {
            print "[+] UDP port $port is open (may be false positive)\n";
            close($socket);
        }
    }
}

print "[*] Starting TCP port scan on $target_ip...\n";
my @tcp_threads;
for (1 .. $MAX_THREADS) {
    push @tcp_threads, threads->create(\&tcp_scan);
}

$_->join() for @tcp_threads;

for my $port ($start_port .. $end_port) {
    $queue->enqueue($port);
}

print "[*] Starting UDP port scan on $target_ip...\n";
my @udp_threads;
for (1 .. $MAX_THREADS) {
    push @udp_threads, threads->create(\&udp_scan);
}

$_->join() for @udp_threads;

print "[*] Scan completed!\n";
exit(0);
